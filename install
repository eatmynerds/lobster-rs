#!/bin/bash
set -euo pipefail
USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"
API_URL="https://api.github.com/repos/eatmynerds/lobster-rs/releases/latest"
TEMP_DIR="./temp-lobster"
ARCH=$(uname -m)
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
# Exit early for unsupported architectures
if [[ "$ARCH" =~ ^(i[3-6]86)$ ]]; then
    echo "Error: 32-bit x86 architectures are not supported. Compile from source instead."
    exit 1
fi
# Cleanup and prepare temp directory
rm -rf "$TEMP_DIR" && mkdir -p "$TEMP_DIR"
# Fetch release information
DOWNLOAD_URL=$(curl -sSL -H "User-Agent: $USER_AGENT" "$API_URL" | jq -r '.assets[0].browser_download_url')
[[ -z "$DOWNLOAD_URL" ]] && { echo "Error: No download URL found."; exit 1; }
# Download and extract
curl -sSL "$DOWNLOAD_URL" -o "$TEMP_DIR/asset.zip"
unzip -q "$TEMP_DIR/asset.zip" -d "$TEMP_DIR"
# Detect Android via ADB or system properties
if command -v getprop &>/dev/null; then OS="android"; fi
if [[ "${1:-}" == "--android" && -n "$(command -v adb)" ]]; then OS="android"; ARCH=$(adb shell uname -m); fi
# Determine build target
case "$OS" in
    *linux*)   BUILD_TARGET="${ARCH}-unknown-linux-gnu_lobster-rs";;
    *darwin*)  BUILD_TARGET="${ARCH}-apple-darwin_lobster-rs";;
    *android*) BUILD_TARGET="${ARCH}-linux-android_lobster-rs";;
    *msys*|*cygwin*|*mingw*|*windows*) BUILD_TARGET="${ARCH}-pc-windows-msvc_lobster-rs.exe";;
    *) echo "Error: Unsupported platform $OS-$ARCH"; exit 1;;
esac
# Locate binary
FOUND_FILE=$(find "$TEMP_DIR" -type f -name "$BUILD_TARGET")
[[ -z "$FOUND_FILE" ]] && { echo "Error: Build target not found."; exit 1; }

# Determine output filename based on platform
if [[ "$OS" =~ msys|cygwin|mingw|windows ]]; then
    DEST_PATH="./lobster-rs.exe"
else
    DEST_PATH="./lobster-rs"
fi

# Move binary to destination
mv "$FOUND_FILE" "$DEST_PATH" && chmod +x "$DEST_PATH"
# Cleanup and finish
rm -rf "$TEMP_DIR"
echo "Done! Binary saved to $DEST_PATH."
