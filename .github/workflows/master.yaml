name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust_os:   [ linux, windows, darwin ]
        rust_arch: [ amd64, arm64 ]
    steps:
      - uses: actions/checkout@v4

      # Install Rust (stable). If you want a fixed version, replace "stable" with e.g. "1.70.0".
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      # Determine which Rust target triple to build for based on (rust_os, rust_arch).
      # We'll store the result in GITHUB_ENV so that future steps can read them as environment variables.
      - name: Determine Rust target triple
        id: rust_target
        run: |
          if [ "${{ matrix.rust_os }}" = "linux" ] && [ "${{ matrix.rust_arch }}" = "amd64" ]; then
            echo "RUST_TARGET=x86_64-unknown-linux-musl" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-linux-amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.rust_os }}" = "linux" ] && [ "${{ matrix.rust_arch }}" = "arm64" ]; then
            echo "RUST_TARGET=aarch64-unknown-linux-musl" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-linux-arm64" >> $GITHUB_ENV

          elif [ "${{ matrix.rust_os }}" = "windows" ] && [ "${{ matrix.rust_arch }}" = "amd64" ]; then
            echo "RUST_TARGET=x86_64-pc-windows-gnu" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-windows-amd64.exe" >> $GITHUB_ENV
          elif [ "${{ matrix.rust_os }}" = "windows" ] && [ "${{ matrix.rust_arch }}" = "arm64" ]; then
            echo "RUST_TARGET=aarch64-pc-windows-msvc" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-windows-arm64.exe" >> $GITHUB_ENV

          elif [ "${{ matrix.rust_os }}" = "darwin" ] && [ "${{ matrix.rust_arch }}" = "amd64" ]; then
            echo "RUST_TARGET=x86_64-apple-darwin" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-darwin-amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.rust_os }}" = "darwin" ] && [ "${{ matrix.rust_arch }}" = "arm64" ]; then
            echo "RUST_TARGET=aarch64-apple-darwin" >> $GITHUB_ENV
            echo "BINARY_NAME=lobster-rs-darwin-arm64" >> $GITHUB_ENV
          else
            echo "Unsupported combination: ${{ matrix.rust_os }} / ${{ matrix.rust_arch }}"
            exit 1
          fi

      - name: Add Rust target
        run: rustup target add $RUST_TARGET

      - name: Build
        run: |
          sudo apt-get update && sudo apt-get install build-essential pkg-config libssl-dev
          which pkg-config 
          pkg-config --cflags openssl 2&>1
          cargo build --release --target $RUST_TARGET

      - name: Collect artifact
        run: |
          # Create an artifacts directory
          mkdir -p artifacts
          
          # Copy the resulting binary to the artifacts directory
          # Our binary is "lobster-rs", rename to $BINARY_NAME from the previous step
          cp target/$RUST_TARGET/release/lobster-rs* artifacts/$BINARY_NAME

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}
          path: artifacts/${{ env.BINARY_NAME }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Download all artifacts produced in the "build" job.
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lobster-rs-*
          merge-multiple: true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}   # Or use secrets.GITHUB_TOKEN if your config allows
        with:
          tag_name: "release-${{ github.run_number }}-${{ github.event.after }}"
          release_name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.TOKEN }}
          file: lobster-rs-* 
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

